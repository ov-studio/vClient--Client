// Libraries: Styles: Mapper
// Desc: Style Mapper

// Verifies if a variable is map
@function is-map($var){
  @return type-of($var) == "map";
}

// Map Reader/Writer
@function map-read($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

@function map-write($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;
  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }
  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }
  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }
  @return $result;
}

// Map Cloner/Extender
@function map-clone($prefix, $map) {
  $current: ();
  @if $prefix != "" {
    $prefix: $prefix + "_"
  }
  @each $key, $value in $map {
    $keyName: $prefix + $key;
    @if is-map($value) == false {
      $current: map-extend($current, (
        $keyName: (
          "key": $keyName,
          "value": $value
        )
      ), true);
    } @else {
      $current: map-extend($current, map-clone($keyName, $value), true);
    }
  }
  @return $current;
}

@function map-extend($map, $maps.../*, $deep */) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));
  @for $i from 1 through $max {
    $current: nth($maps, $i);
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      @each $key, $value in $current {
        @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
          $value: map-extend(map-get($map, $key), $value, true);
        }
        $map: map-merge($map, ($key: $value));
      }
    }
  }
  @return $map;
}